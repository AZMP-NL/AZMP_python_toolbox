'''
To generate AZMP score cards for bottom temperature

Uses pickled object generated by azmp_bottom_stats.py

'''

import numpy as  np
import matplotlib.pyplot as plt
import pandas as pd
import os


#### ------------- For fall ---------------- ####
infile = 'stats_2J_fall.pkl'
df = pd.read_pickle(infile)
std_anom = (df-df.mean(axis=0))/df.std(axis=0)
#div = ['2J' for i in range(std_anom.index.size)]
#std_anom['division'] = div
std_anom = std_anom.T
std_anom = std_anom.reindex(['Tmean', 'Tmean_sha100', 'area_warmer2', 'area_colder0'])
std_anom = std_anom.rename({'Tmean': 'Bottom Temperature', 'Tmean_sha100': 'Bottom Temperature <100m', 'area_warmer2': r'Thermal Habitat >$2^{\circ}C$', 'area_colder0': r'Thermal Habitat >$0^{\circ}C$'})


vals = np.around(std_anom.values,1)
normal = plt.Normalize(-4, 4)
cmap = plt.cm.get_cmap('seismic', 9) 
nrows, ncols = std_anom.index.size+1, std_anom.columns.size
hcell, wcell = 0.5, 0.5
hpad, wpad = 0, 0    
fig=plt.figure(figsize=(ncols*wcell+wpad, nrows*hcell+hpad))
ax = fig.add_subplot(111)
ax.axis('off')
#do the table
header = ax.table(cellText=[['']],
                      colLabels=['-- NAFO divison 2J --'],
                      loc='center'
                      )

header.set_fontsize(13)
#the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=std_anom.columns, 
the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=std_anom.columns, 
                    loc='center', cellColours=cmap(normal(vals)),
                    #bbox=[0, 0, 1.0, 0.40]
                    bbox=[0, 0, 1, 0.5]
                    )
plt.savefig("scorecards_fall_2J.png", dpi=300)
os.system('convert -trim scorecards_fall_2J.png scorecards_fall_2J.png')




infile = 'stats_3K_fall.pkl'
df = pd.read_pickle(infile)
std_anom = (df-df.mean(axis=0))/df.std(axis=0)
#div = ['3K' for i in range(std_anom.index.size)]
#std_anom['division'] = div
std_anom = std_anom.T
std_anom = std_anom.reindex(['Tmean', 'Tmean_sha100', 'area_warmer2', 'area_colder0'])
std_anom = std_anom.rename({'Tmean': 'Bottom Temperature', 'Tmean_sha100': 'Bottom Temperature <100m', 'area_warmer2': r'Thermal Habitat >$2^{\circ}C$', 'area_colder0': r'Thermal Habitat >$0^{\circ}C$'})

vals = np.around(std_anom.values,1)
normal = plt.Normalize(-4, 4)
cmap = plt.cm.get_cmap('seismic', 9) 
nrows, ncols = std_anom.index.size+1, std_anom.columns.size
fig=plt.figure(figsize=(ncols*wcell+wpad, nrows*hcell+hpad))
ax = fig.add_subplot(111)
ax.axis('off')
#do the table
header = ax.table(cellText=[['']],
                      colLabels=['-- NAFO divison 3K --'],
                      loc='center'
                      )
header.set_fontsize(13)
#the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=std_anom.columns, 
the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=None, 
                    loc='center', cellColours=cmap(normal(vals)),
                    bbox=[0, 0, 1.0, 0.50]
                    )
plt.savefig("scorecards_fall_3K.png", dpi=300)
os.system('convert -trim scorecards_fall_3K.png scorecards_fall_3K.png')


infile = 'stats_3LNO_fall.pkl'
df = pd.read_pickle(infile)
std_anom = (df-df.mean(axis=0))/df.std(axis=0)
#div = ['3LNO' for i in range(std_anom.index.size)]
#std_anom['division'] = div
std_anom = std_anom.T
std_anom = std_anom.reindex(['Tmean', 'Tmean_sha100', 'area_warmer2', 'area_colder0'])
std_anom = std_anom.rename({'Tmean': 'Bottom Temperature', 'Tmean_sha100': 'Bottom Temperature <100m', 'area_warmer2': r'Thermal Habitat >$2^{\circ}C$', 'area_colder0': r'Thermal Habitat >$0^{\circ}C$'})

vals = np.around(std_anom.values,1)
normal = plt.Normalize(-4, 4)
cmap = plt.cm.get_cmap('seismic', 9) 
fig=plt.figure(figsize=(ncols*wcell+wpad, nrows*hcell+hpad))
ax = fig.add_subplot(111)
ax.axis('off')
#do the table
header = ax.table(cellText=[['']],
                      colLabels=['-- NAFO divison 3LNO --'],
                      loc='center'
                      )

header.set_fontsize(13)
#the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=std_anom.columns, 
the_table=ax.table(cellText=vals, rowLabels=std_anom.index, colLabels=None, 
                    loc='center', cellColours=cmap(normal(vals)),
                    bbox=[0, 0, 1.0, 0.50]
                    )
plt.savefig("scorecards_fall_3LNO.png", dpi=300)
os.system('convert -trim scorecards_fall_3LNO.png scorecards_fall_3LNO.png')

os.system('montage  scorecards_fall_2J.png scorecards_fall_3K.png scorecards_fall_3LNO.png -tile 1x3 -geometry +1+1  -background white  scorecards_botT_fall.png') 



keyboard




